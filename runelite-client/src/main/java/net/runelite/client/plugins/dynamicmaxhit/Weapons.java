/*
 * Copyright (c) 2019, ganom <https://github.com/Ganom>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.runelite.client.plugins.dynamicmaxhit;

import com.google.common.collect.ImmutableSet;
import java.util.Set;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import net.runelite.api.ItemID;

@AllArgsConstructor
@Getter(AccessLevel.PACKAGE)
enum Weapons
{
	ABYSSAL_DAGGER(ImmutableSet.of(ItemID.ABYSSAL_DAGGER, ItemID.ABYSSAL_DAGGER_P, ItemID.ABYSSAL_DAGGER_P_13269, ItemID.ABYSSAL_DAGGER_P_13271),
		3300, -1, 50),
	ABYSSAL_WHIP(ImmutableSet.of(ItemID.ABYSSAL_WHIP, ItemID.ABYSSAL_WHIP_4178, ItemID.ABYSSAL_WHIP_20405, ItemID.FROZEN_ABYSSAL_WHIP,
		ItemID.VOLCANIC_ABYSSAL_WHIP, ItemID.ABYSSAL_TENTACLE),
		1658, 341, 50),
	AGS(ImmutableSet.of(ItemID.ARMADYL_GODSWORD, ItemID.ARMADYL_GODSWORD_20593, ItemID.ARMADYL_GODSWORD_22665, ItemID.ARMADYL_GODSWORD_OR),
		7644, -1, 50),
	ANCIENT_MACE(ImmutableSet.of(ItemID.ANCIENT_MACE),
		6147, -1, 100),
	ARMADYL_CBOW(ImmutableSet.of(ItemID.ARMADYL_CROSSBOW, ItemID.ARMADYL_CROSSBOW_23611),
		-1, -1, 50),
	BARRELCHEST_ANCHOR(ImmutableSet.of(ItemID.BARRELCHEST_ANCHOR, ItemID.BARRELCHEST_ANCHOR_10888),
		5870, -1, 50),
	BGS(ImmutableSet.of(ItemID.BANDOS_GODSWORD, ItemID.BANDOS_GODSWORD_20782, ItemID.BANDOS_GODSWORD_21060, ItemID.BANDOS_GODSWORD_OR),
		7642, -1, 50),
	BLUDGEON(ImmutableSet.of(ItemID.ABYSSAL_BLUDGEON),
		-1, -1, 50),
	DARK_BOW(ImmutableSet.of(ItemID.DARK_BOW, ItemID.DARK_BOW_12765, ItemID.DARK_BOW_12766, ItemID.DARK_BOW_12767, ItemID.DARK_BOW_12768, ItemID.DARK_BOW_20408),
		426, 1100, 50),
	DORG_CBOW(ImmutableSet.of(ItemID.DORGESHUUN_CROSSBOW),
		7557, -1, 50),
	DRAGON_2H_SWORD(ImmutableSet.of(ItemID.DRAGON_2H_SWORD, ItemID.DRAGON_2H_SWORD_20559),
		3157, -1, 60),
	DRAGON_CBOW(ImmutableSet.of(ItemID.DRAGON_CROSSBOW),
		4230, -1, 50),
	DRAGON_CLAWS(ImmutableSet.of(ItemID.DRAGON_CLAWS, ItemID.DRAGON_CLAWS_20784),
		7514, -1, 50),
	DRAGON_DAGGER(ImmutableSet.of(ItemID.DRAGON_DAGGER, ItemID.DRAGON_DAGGER_20407, ItemID.DRAGON_DAGGERP, ItemID.DRAGON_DAGGERP_5680, ItemID.DRAGON_DAGGERP_5698),
		1062, -1, 25),
	DRAGON_HALBERD(ImmutableSet.of(ItemID.DRAGON_HALBERD),
		1203, -1, 30),
	DRAGON_LONG(ImmutableSet.of(ItemID.DRAGON_LONGSWORD),
		1058, -1, 25),
	DRAGON_MACE(ImmutableSet.of(ItemID.DRAGON_MACE),
		-1, -1, 25),
	DRAGON_SCIM(ImmutableSet.of(ItemID.DRAGON_SCIMITAR, ItemID.DRAGON_SCIMITAR_20406, ItemID.DRAGON_SCIMITAR_OR),
		1872, -1, 55),
	DRAGON_SPEAR(ImmutableSet.of(ItemID.DRAGON_SPEAR, ItemID.DRAGON_SPEARP, ItemID.DRAGON_SPEARP_5716, ItemID.DRAGON_SPEARP_5730, ItemID.DRAGON_SPEARKP),
		1064, -1, 25),
	DRAGON_SWORD(ImmutableSet.of(ItemID.DRAGON_SWORD, ItemID.DRAGON_SWORD_21206),
		7515, -1, 40),
	DRAGON_THROWN_AXE(ImmutableSet.of(ItemID.DRAGON_THROWNAXE, ItemID.DRAGON_THROWNAXE_21207),
		8292, -1, 25),
	DRAGON_THROWN_KNIVES(ImmutableSet.of(ItemID.DRAGON_KNIFE, ItemID.DRAGON_KNIFE_22812, ItemID.DRAGON_KNIFE_22814, ItemID.DRAGON_KNIFEP_22808, ItemID.DRAGON_KNIFEP_22810),
		7521, -1, 25),
	GRANITE_HAMMER(ImmutableSet.of(ItemID.GRANITE_HAMMER),
		1378, -1, 60),
	GRANITE_MAUL(ImmutableSet.of(ItemID.GRANITE_MAUL, ItemID.GRANITE_MAUL_12848, ItemID.GRANITE_MAUL_20557),
		1667, -1, 50),
	HEAVY_BALLISTA(ImmutableSet.of(ItemID.HEAVY_BALLISTA, ItemID.HEAVY_BALLISTA_23630),
		7556, -1, 65),
	LIGHT_BALLISTA(ImmutableSet.of(ItemID.LIGHT_BALLISTA),
		-1, -1, 65),
	MAGIC_SHORTBOW(ImmutableSet.of(ItemID.MAGIC_SHORTBOW, ItemID.MAGIC_SHORTBOW_20558),
		1074, -1, 55),
	MAGIC_SHORTBOW_I(ImmutableSet.of(ItemID.MAGIC_SHORTBOW_I),
		1074, -1, 50),
	MORI_THROWN_AXE(ImmutableSet.of(ItemID.MORRIGANS_THROWING_AXE),
		-1, -1, 50),
	MORRI_JAVELIN(ImmutableSet.of(ItemID.MORRIGANS_JAVELIN, ItemID.MORRIGANS_JAVELIN_23619),
		-1, -1, 50),
	RUNE_CLAWS(ImmutableSet.of(ItemID.RUNE_CLAWS),
		923, -1, 25),
	SARA_BLESSED_SWORD(ImmutableSet.of(ItemID.SARADOMINS_BLESSED_SWORD),
		-1, -1, 65),
	SARA_SWORD(ImmutableSet.of(ItemID.SARADOMIN_SWORD),
		1132, -1, 100),
	SGS(ImmutableSet.of(ItemID.SARADOMIN_GODSWORD, ItemID.SARADOMIN_GODSWORD_OR),
		-1, -1, 50),
	STAFF_OF_LIGHT(ImmutableSet.of(ItemID.STAFF_OF_LIGHT),
		-1, -1, 100),
	STATIUS_WARHAMMER(ImmutableSet.of(ItemID.STATIUSS_WARHAMMER, ItemID.STATIUSS_WARHAMMER_23620),
		-1, -1, 35),
	TOXIC_STAFF(ImmutableSet.of(ItemID.TOXIC_STAFF_OF_THE_DEAD, ItemID.STAFF_OF_THE_DEAD, ItemID.STAFF_OF_THE_DEAD_23613),
		1720, -1, 100),
	VESTA_LONGSWORD(ImmutableSet.of(ItemID.VESTAS_LONGSWORD, ItemID.VESTAS_LONGSWORD_23615),
		-1, -1, 25),
	VESTA_SPEAR(ImmutableSet.of(ItemID.VESTAS_SPEAR),
		-1, -1, 50),
	ZGS(ImmutableSet.of(ItemID.ZAMORAK_GODSWORD, ItemID.ZAMORAK_GODSWORD_OR),
		7638, -1, 50);

	private Set<Integer> ID;
	private int sourceAnim;
	private int targetGfx;
	private double specDrain;
}