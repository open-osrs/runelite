/*
 * This file is generated by jOOQ.
 */
package net.runelite.client.database.data.tables;


import java.util.Arrays;
import java.util.List;
import javax.annotation.processing.Generated;
import net.runelite.client.database.data.Indexes;
import net.runelite.client.database.data.Public;
import net.runelite.client.database.data.tables.records.TmorphSetsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.12.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TmorphSets extends TableImpl<TmorphSetsRecord>
{

	private static final long serialVersionUID = -2027086786;

	/**
	 * The reference instance of <code>PUBLIC.TMORPH_SETS</code>
	 */
	public static final TmorphSets TMORPH_SETS = new TmorphSets();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TmorphSetsRecord> getRecordType()
	{
		return TmorphSetsRecord.class;
	}

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.SET_NAME</code>.
	 */
	public final TableField<TmorphSetsRecord, String> SET_NAME = createField(DSL.name("SET_NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.HELMET</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> HELMET = createField(DSL.name("HELMET"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.CAPE</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> CAPE = createField(DSL.name("CAPE"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.AMULET</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> AMULET = createField(DSL.name("AMULET"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.WEAPON</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> WEAPON = createField(DSL.name("WEAPON"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.TORSO</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> TORSO = createField(DSL.name("TORSO"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.SHIELD</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> SHIELD = createField(DSL.name("SHIELD"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.LEGS</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> LEGS = createField(DSL.name("LEGS"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.HANDS</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> HANDS = createField(DSL.name("HANDS"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TMORPH_SETS.BOOTS</code>.
	 */
	public final TableField<TmorphSetsRecord, Integer> BOOTS = createField(DSL.name("BOOTS"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.TMORPH_SETS</code> table reference
	 */
	public TmorphSets()
	{
		this(DSL.name("TMORPH_SETS"), null);
	}

	/**
	 * Create an aliased <code>PUBLIC.TMORPH_SETS</code> table reference
	 */
	public TmorphSets(String alias)
	{
		this(DSL.name(alias), TMORPH_SETS);
	}

	/**
	 * Create an aliased <code>PUBLIC.TMORPH_SETS</code> table reference
	 */
	public TmorphSets(Name alias)
	{
		this(alias, TMORPH_SETS);
	}

	private TmorphSets(Name alias, Table<TmorphSetsRecord> aliased)
	{
		this(alias, aliased, null);
	}

	private TmorphSets(Name alias, Table<TmorphSetsRecord> aliased, Field<?>[] parameters)
	{
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> TmorphSets(Table<O> child, ForeignKey<O, TmorphSetsRecord> key)
	{
		super(child, key, TMORPH_SETS);
	}

	@Override
	public Schema getSchema()
	{
		return Public.PUBLIC;
	}

	@Override
	public List<Index> getIndexes()
	{
		return Arrays.<Index>asList(Indexes.TMORPH_SETS_SET_NAME_UINDEX);
	}

	@Override
	public TmorphSets as(String alias)
	{
		return new TmorphSets(DSL.name(alias), this);
	}

	@Override
	public TmorphSets as(Name alias)
	{
		return new TmorphSets(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public TmorphSets rename(String name)
	{
		return new TmorphSets(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public TmorphSets rename(Name name)
	{
		return new TmorphSets(name, null);
	}

	// -------------------------------------------------------------------------
	// Row10 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row10<String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow()
	{
		return (Row10) super.fieldsRow();
	}
}
