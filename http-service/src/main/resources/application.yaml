datasource:
  runelite:
    jndiName: java:comp/env/jdbc/runelite
  runelite-cache:
    jndiName: java:comp/env/jdbc/runelite-cache2
  runelite-tracker:
    jndiName: java:comp/env/jdbc/runelite-tracker

# By default Spring tries to register the datasource as an MXBean,
# so if multiple apis are deployed on one web container with
# shared datasource it tries to register it multiples times and
# fails when starting the 2nd api
spring.jmx.enabled: false

# Google OAuth client
oauth:
  client-id:
  client-secret:
  callback: https://api.runelite.net/oauth/

# Minio client storage for cache
minio:
  endpoint: http://localhost:9000
  accesskey: AM54M27O4WZK65N6F8IP
  secretkey: /PZCxzmsJzwCHYlogcymuprniGCaaLUOET2n6yMP
  bucket: runelite

# Redis client for temporary data storage
redis:
  pool.size: 10
  host: http://localhost:6379

mongo:
  jndiName: java:comp/env/mongodb/runelite
  database: runelite

# Twitter client for feed
runelite:
  twitter:
    consumerkey:
    secretkey:
    listid: 1185897074786742273